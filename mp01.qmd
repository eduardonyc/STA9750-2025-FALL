---
title: "STA 9750 Mini-Project #01: Netflix Analysis"
author: "Eduardo Alarcon"
format: 
  html:
    code-fold: true
    code-summary: "Show code"
execute:
  message: false
  warning: false
---

## Tasks 1,2, and 3

Following the guidelines for Mini Project #01, the code below contains all the essential content that addresses Tasks 1, 2, and 3. Moreover, this section is crucial for completing the remaining parts of the project, specifically Tasks 4, 5, 6, and 7.

```{r}
#| code-fold: true
#| code-summary: "Show code"
#| echo: true
#| results: 'hide'
#| message: false
#| warning: false

library(dplyr)
library(lubridate)
library(readr)
library(scales)
library(tidyverse)
library(knitr)
library(ggplot2)
library(tibble)
library(htmltools)
library(janitor)

if(!dir.exists(file.path("data", "mp01"))){ dir.create(file.path("data", "mp01"), showWarnings=FALSE, recursive=TRUE) }
GLOBAL_TOP_10_FILENAME <- file.path("data", "mp01", "global_top10_alltime.csv")
if(!file.exists(GLOBAL_TOP_10_FILENAME)){ download.file("https://www.netflix.com/tudum/top10/data/all-weeks-global.tsv", destfile=GLOBAL_TOP_10_FILENAME) }
COUNTRY_TOP_10_FILENAME <- file.path("data", "mp01", "country_top10_alltime.csv")
if(!file.exists(COUNTRY_TOP_10_FILENAME)){ download.file("https://www.netflix.com/tudum/top10/data/all-weeks-countries.tsv", destfile=COUNTRY_TOP_10_FILENAME) }

if(!require("tidyverse")) install.packages("tidyverse")

GLOBAL_TOP_10 <- read_tsv(GLOBAL_TOP_10_FILENAME)
str(GLOBAL_TOP_10)
glimpse(GLOBAL_TOP_10)

GLOBAL_TOP_10 <- GLOBAL_TOP_10 %>%
  mutate(season_title = if_else(season_title == "N/A", NA, season_title))
glimpse(GLOBAL_TOP_10)

COUNTRY_TOP_10 <- read_tsv(COUNTRY_TOP_10_FILENAME, na = "N/A")
glimpse(COUNTRY_TOP_10)
str(COUNTRY_TOP_10)

n_distinct(COUNTRY_TOP_10$country_name)

GLOBAL_TOP_10 %>%
filter(category == "Films (Non-English)") %>%
group_by(show_title) %>%
summarise(max_cumulweeks = max(cumulative_weeks_in_top_10, na.rm = TRUE)) %>%
arrange(desc(max_cumulweeks)) %>%
slice(1)

library(stringr)
library(DT)

format_titles <- function(df){
    colnames(df) <- str_replace_all(colnames(df), "_", " ") |> str_to_title()
    df
}

GLOBAL_TOP_10 |> 
head(n=20) |>
datatable(options=list(searching=FALSE, info=FALSE))

GLOBAL_TOP_10 |> 
format_titles() |>
head(n=20) |>
datatable(options=list(searching=FALSE, info=FALSE)) |>
formatRound(c('Weekly Hours Viewed', 'Weekly Views'))

```

<br>

## Task 4: Exploratory Questions

The following questions relate to Task 4. Please click on "Show Code" for a detailed explanation of how I achieved my results.

<br>

1. How many different countries does Netflix operate in? (You can use the viewing history as a proxy for countries in which Netflix operates.)

```{r}

#| output: false
n_distinct(COUNTRY_TOP_10$country_name)

``` 
**Answer:** Netflix operates in ```r n_distinct(COUNTRY_TOP_10$country_name)``` different countries based on the viewing history data.

<br>

2. Which non-English-language film has spent the most cumulative weeks in the global top 10? How many weeks did it spend?

```{r}

Q2_RESULT <- GLOBAL_TOP_10 %>%
filter(category == "Films (Non-English)") %>%
group_by(show_title) %>%
summarise(`Maximum Cumulative Weeks` = max(cumulative_weeks_in_top_10, na.rm = TRUE)) %>%
arrange(desc(`Maximum Cumulative Weeks`)) %>%
slice(1)

film_name_2 <- Q2_RESULT$show_title
weeks_count_2 <- Q2_RESULT[[2]]

Q2_RESULT %>%
format_titles() %>%
datatable(options = list(searching = FALSE, info = FALSE, paging = FALSE, columnDefs = list(list(className = 'dt-left', targets = "_all"))))

```

<br>

**Answer:** The non-English-language film ```r film_name_2``` spent the most cumulative weeks in the Global Top 10, with ```r weeks_count_2``` weeks.

<br>

3.	What is the longest film (English or non-English) to have ever appeared in the Netflix global Top 10? How long is it in minutes?
```{r}
Q3_RESULT <- GLOBAL_TOP_10 %>%
  filter(category %in% c("Films (Non-English)", "Films (English)")) %>%
  filter(!is.na(runtime)) %>%   
  group_by(show_title) %>%
  summarise(max_runtime = max(runtime)) %>%   
  arrange(desc(max_runtime)) %>%
  slice(1) %>%
  mutate(max_runtime_minutes = round(60 * max_runtime))

film_name_3 <- Q3_RESULT$show_title
run_time_3 <- Q3_RESULT[[3]]

Q3_RESULT %>%
select(-max_runtime) %>%
format_titles() %>%
datatable(options = list(searching = FALSE, info = FALSE, paging = FALSE, columnDefs = list(list(className = 'dt-left', targets = "_all"))))

```

<br>

**Answer:** The longest English or non-English film to have ever topped in the Netflix Global Top 10 is ```r film_name_3```, with a length of ```r run_time_3``` minutes.

<br>

4. For each of the four categories, what program has the most total hours of global viewership?

```{r}
Q4_RESULT <- GLOBAL_TOP_10 %>%
  group_by(category, show_title) %>%
  summarise(total_hours_global_viewership = sum(weekly_hours_viewed, na.rm = TRUE), .groups = "drop") %>%
  group_by(category) %>%
  slice_max(total_hours_global_viewership, n = 1) %>%
  arrange(desc(total_hours_global_viewership))

top_program <- Q4_RESULT$show_title[1]
top_category <- Q4_RESULT$category[1]
top_hours <- comma(Q4_RESULT$total_hours_global_viewership[1])

Q4_RESULT %>%
  mutate(total_hours_global_viewership = comma(total_hours_global_viewership)) %>%
  format_titles() %>%
  datatable(options = list(searching = FALSE, info = FALSE, paging = FALSE, 
                          columnDefs = list(list(className = 'dt-left', targets = "_all"))))

```

<br>

**Answer:** The table above highlights the top program in each of the four categories, with all seasons combined. The program with the most total hours of global viewership is ```r top_program``` (```r top_category```), amassing ```r top_hours``` hours. 

<br>

5.	Which TV show had the longest run in a countryâ€™s Top 10? How long was this run and in what country did it occur?

```{r}

Q5_RESULT <- COUNTRY_TOP_10 %>%
  filter(category == "TV") %>%
  filter(!is.na(season_title)) %>%
  group_by(country_name, show_title) %>%
  summarise(max_cumulative_weeks = max(cumulative_weeks_in_top_10), .groups = "drop") %>%
  arrange(desc(max_cumulative_weeks)) %>%
  slice(1)

top_show <- Q5_RESULT$show_title
top_country <- Q5_RESULT$country_name
top_weeks <- Q5_RESULT$max_cumulative_weeks

Q5_RESULT %>%
  format_titles() %>%
  datatable(options = list(searching = FALSE, info = FALSE, paging = FALSE, 
                          columnDefs = list(list(className = 'dt-left', targets = "_all"))))
```

<br>

**Answer:** ```r top_show``` had the longest run in a country's Top 10, with ```r top_weeks``` weeks in ```r top_country```.

<br>

6. Netflix provides over 200 weeks of service history for all but one country in our data set. Which country is this and when did Netflix cease operations in that country?

```{r}

Q6_RESULT <- COUNTRY_TOP_10 %>%
  group_by(country_name) %>%
  summarise(total_weeks_of_data = n_distinct(week), final_week = max(week, na.rm = TRUE)) %>%
  filter(total_weeks_of_data < 200) %>%
  arrange(total_weeks_of_data)

country_with_less_data <- Q6_RESULT$country_name[1]
total_weeks <- Q6_RESULT$total_weeks_of_data[1]
cessation_date <- Q6_RESULT$final_week[1]

Q6_RESULT %>%
  format_titles() %>%
  datatable(options = list(searching = FALSE, info = FALSE, paging = FALSE, 
                          columnDefs = list(list(className = 'dt-left', targets = "_all"))))

```

<br>

**Answer:** Netflix could not provide over 200 weeks of service for ```r country_with_less_data```, as it ceased operations during the week of ```r format(cessation_date, "%B %d, %Y")```, resulting in ```r total_weeks``` weeks of data in the Country Top 10 list.

<br>

7. What is the total viewership of the TV show Squid Game? Note that there are three seasons total and we are looking for the total number of hours watched across all seasons.

```{r}

Q7_RESULT_SEASONS <- GLOBAL_TOP_10 %>%
  filter(show_title == "Squid Game") %>%
  filter(!is.na(season_title)) %>%
  group_by(season_title) %>%
  summarise(sum_hours = sum(weekly_hours_viewed, na.rm = TRUE)) %>%
  mutate(hours_watched = comma(sum_hours))

Q7_RESULT_SEASONS_SUM <- Q7_RESULT_SEASONS %>%
  summarise(
    season_title = "Total Hours Watched Across All Seasons",
    sum_hours_1 = sum(sum_hours),
    hours_watched = comma(sum_hours_1))

total_squid_game_hours <- comma(sum(Q7_RESULT_SEASONS$sum_hours))

Q7_RESULT_FINAL <- bind_rows(Q7_RESULT_SEASONS, Q7_RESULT_SEASONS_SUM) %>%
  select(season_title, hours_watched)

Q7_RESULT_FINAL %>%
  format_titles() %>%
  datatable(options = list(searching = FALSE, info = FALSE, paging = FALSE, 
                          columnDefs = list(list(className = 'dt-left', targets = "_all"))))

```

<br>

**Answer:** Across all three seasons, Squid Game had a total of ```r total_squid_game_hours``` hours of global viewership. 

<br>

8. The movie Red Notice has a runtime of 1 hour and 58 minutes. Approximately how many views did it receive in 2021?

```{r}

Q8_ROWS <- GLOBAL_TOP_10 %>%
  mutate(week = as.Date(week)) %>%
  filter(show_title == "Red Notice", year(week) == 2021)

if (nrow(Q8_ROWS) == 0) {
  Q8_RESULT <- tibble(
    `Total Hours Viewed (2021)` = "N/A",
    `Approximate Views` = "N/A"
  )
  red_notice_views <- "N/A"
  red_notice_hours <- "N/A"
} else {
  Q8_RESULT <- Q8_ROWS %>%
    summarise(
      total_hours_2021 = sum(weekly_hours_viewed, na.rm = TRUE),
      runtime_hours = 1 + 58/60,  # 1h 58m
      approximate_views = total_hours_2021 / runtime_hours) %>%
    mutate(
      `Total Hours Viewed (2021)` = comma(total_hours_2021), 
      `Approximate Views` = comma(round(approximate_views))
    ) %>%
    select(`Total Hours Viewed (2021)`, `Approximate Views`)
  red_notice_views <- Q8_RESULT$`Approximate Views`
  red_notice_hours <- Q8_RESULT$`Total Hours Viewed (2021)`
}

Q8_RESULT %>%
  datatable(options = list(
    searching = FALSE, 
    info = FALSE, 
    paging = FALSE,
    columnDefs = list(list(className = 'dt-left', targets = "_all"))))

```

<br>

**Answer:** Based on the total number of hours viewed in 2021, Red Notice received approximately ```r red_notice_views``` global views.

<br>

9. Part A: How many Films reached Number 1 in the US but did not originally debut there? 


```{r}

COUNTRY_TOP_10_US_ONLY <- COUNTRY_TOP_10 %>%
  filter(country_iso2 == "US", category == "Films") %>%
  mutate(week = as.Date(week))

US_FILMS_REACH1 <- COUNTRY_TOP_10_US_ONLY %>%
  group_by(show_title) %>%
  summarise(best_rank = min(weekly_rank, na.rm = TRUE), .groups = "drop") %>%
  filter(best_rank == 1)

US_DEBUT <- COUNTRY_TOP_10_US_ONLY %>%
  group_by(show_title) %>%
  arrange(week, .by_group = TRUE) %>%    
  slice(1L) %>%                         
  ungroup() %>%
  transmute(show_title, debut_week = week, debut_rank = weekly_rank)

Q9_RESULT_PT1 <- US_FILMS_REACH1 %>%
  inner_join(US_DEBUT, by = "show_title") %>%
  filter(debut_rank > 1) %>%
  summarise(number_of_films = n())

```

<br>

**Answer:** A total of ```r Q9_RESULT_PT1``` films in the US reached to Number 1 after debuting at a lower ranking. 

<br>

9. Part B: What is the most recent film to pull this off?

```{r}

Q9_RESULT_PT2 <- COUNTRY_TOP_10 %>%
  filter(country_iso2 == "US", category == "Films") %>%
  mutate(week = as.Date(week)) %>%
  group_by(show_title) %>%
  summarise(
    debut_week = min(week),
    debut_rank = weekly_rank[which.min(week)],
    best_rank  = min(weekly_rank, na.rm = TRUE),
    .groups = "drop") %>%
  filter(best_rank == 1, debut_rank > 1) %>%
  inner_join(COUNTRY_TOP_10 %>%
    filter(country_iso2 == "US", category == "Films") %>%
    mutate(week = as.Date(week)) %>%
    select(show_title, week, weekly_rank), by = "show_title") %>%
  filter(weekly_rank == 1) %>%
  slice_max(order_by = week, n = 1, with_ties = FALSE) %>%
  transmute(`Most Recent Film` = show_title, `Date Reached #1` = week)

most_recent_film <- Q9_RESULT_PT2$`Most Recent Film`
date_reached_number1 <- Q9_RESULT_PT2$`Date Reached #1`

Q9_RESULT_PT2 %>%
  datatable(
    options = list(searching = FALSE, info = FALSE, paging = FALSE, 
                   columnDefs = list(list(className = 'dt-left', targets = "_all"))))

```

<br>

**Answer:** The most recent film to accomplish this was ```r most_recent_film```, which reached Number 1 during the week of ```r format(date_reached_number1, "%B %d, %Y")```.


<br>

10. Which TV show/season hit the top 10 in the most countries in its debut week? In how many countries did it chart?

```{r}

COUNTRY_TOP_10_DEBUT <- COUNTRY_TOP_10 %>%
  filter(category == "TV") %>%
  group_by(show_title, season_title, country_name) %>%
  summarise(
    debut_week = min(week, na.rm = TRUE),
    debut_rank = weekly_rank[which.min(week)][1],
    .groups = "drop"
  ) %>%
  arrange(debut_week)

Q10_RESULT <- COUNTRY_TOP_10_DEBUT %>% 
  group_by(show_title, season_title, debut_week) %>% 
  summarise(country_appearance = n_distinct(country_name), .groups = "drop") %>% 
  arrange(desc(country_appearance)) %>% 
  slice(1) %>%
  rename(`Show Title` = show_title, `Season Title` = season_title, `Debut Week` = debut_week, `Number of Countries Charted` = country_appearance)

top_debut_show <- Q10_RESULT$`Show Title`
top_debut_season <- Q10_RESULT$`Season Title`
countries_charted <- Q10_RESULT$`Number of Countries Charted`
debut_date <- Q10_RESULT$`Debut Week`

Q10_RESULT %>%
  datatable(options = list(searching = FALSE, info = FALSE, paging = FALSE, 
                          columnDefs = list(list(className = 'dt-left', targets = "_all"))))

```

<br>

**Answer:** ```r top_debut_show``` (```r top_debut_season```) charted in ```r countries_charted``` countries during its debut week on ```r format(debut_date, "%B %d, %Y")```.

<br>

## Task 5: Press Release 1
## Nine Years Later: 93 Countries Await *Stranger Things'* Epic Finale

<div style="text-align: justify;">

Netflix is gearing up to release the fifth season of the *Stranger Things* series in late November 2025. This final season will bring to a close the global phenomenon that has earned nearly 3 billion viewing hours across 93 countries since its 2016 debut.

Across its four seasons, *Stranger Things* has logged 2.97 billion global viewing hours. The series has spent a spectacular average of 13.4 weeks in Netflix's Country Top 10 charts, showing its impact and resilience across countries. Most notably, Pakistan and Ukraine have sustained the show's momentum, appearing in their top ten for 24 weeks, proving the impact of season engagement and longevity well after its premiere.

Season 4 delivered a record-breaking performance, pulling in 1.89 billion viewing hours, which accounts for 64% of the series' total viewership to date. This recent season occupied Netflix's Global Top 10 chart for 19 weeks, including seven consecutive weeks at number one, securing its title as Netflix's most-watched English-language genre series by total viewing hours.

Among Netflix's English-language sci-fi and fantasy originals, *Stranger Things* has a significant lead in cumulative viewing hours over other series in the genre. For comparison, other top performers include *Wednesday*, with 2.84 billion hours across two seasons, and *The Witcher*, with 1.12 billion hours over three seasons. However, *Stranger Things* holds its top position as the platform's premier franchise in the genre.

The final season is poised to be one of 2025's most anticipated series finales, with a global fan base that has followed the story for nine years, eagerly awaiting the conclusion of the saga of Eleven and the Upside Down.

</div>

---

*Supporting data and references are included below to provide context and transparency for the information shared in this press release.*

```{r}

# TABLE 1: Season-by-Season Breakdown

episode_minutes <- tibble(
  season_num = 1:4,
  avg_minutes = c(47, 60, 60, 87))

ST_GLOBAL <- GLOBAL_TOP_10 %>%
  filter(show_title == "Stranger Things") %>%
  mutate(season_num = parse_number(coalesce(season_title, "1"))) %>%
  filter(season_num %in% 1:4) %>%
  group_by(season_num) %>%
  summarise(
    `Total Global Hours Viewed` = sum(weekly_hours_viewed, na.rm = TRUE),
    `Global Weeks in Top 10` = n_distinct(week),
    `Global Weeks at #1` = sum(weekly_rank == 1, na.rm = TRUE),
    .groups = "drop")

ST_COUNTRY <- COUNTRY_TOP_10 %>%
  filter(show_title == "Stranger Things") %>%
  mutate(season_num = parse_number(coalesce(season_title, "1"))) %>%
  filter(season_num %in% 1:4) %>%
  group_by(season_num) %>%
  summarise(
    `Countries Reached` = n_distinct(country_name),
    `Country-Weeks in Top 10` = n(),
    .groups = "drop")

ST_IMPACT <- ST_GLOBAL %>%
  left_join(ST_COUNTRY, by = "season_num") %>%
  left_join(episode_minutes, by = "season_num") %>%
  mutate(
    Season = paste0("Stranger Things: S", season_num),
    `Approx. Viewership` = `Total Global Hours Viewed` / (avg_minutes / 60)
  ) %>%
  select(
    Season,
    `Total Global Hours Viewed`,
    `Approx. Viewership`,
    `*Average Episode Minutes` = avg_minutes,
    `Global Weeks in Top 10`,
    `Global Weeks at #1`,
    `Countries Reached`,
    `Country-Weeks in Top 10`)

totals <- ST_IMPACT %>%
  summarise(
    Season = "Totals",
    `Total Global Hours Viewed` = sum(`Total Global Hours Viewed`),
    `Approx. Viewership` = sum(`Approx. Viewership`),
    `*Average Episode Minutes` = 0,
    `Global Weeks in Top 10` = sum(`Global Weeks in Top 10`),
    `Global Weeks at #1` = sum(`Global Weeks at #1`),
    `Countries Reached` = max(`Countries Reached`),
    `Country-Weeks in Top 10` = sum(`Country-Weeks in Top 10`))

ST_IMPACT_FINAL <- bind_rows(ST_IMPACT, totals) %>%
  mutate(
    `Total Global Hours Viewed` = comma(`Total Global Hours Viewed`),
    `Approx. Viewership` = comma(round(`Approx. Viewership`)),
    `Global Weeks in Top 10` = comma(`Global Weeks in Top 10`),
    `Global Weeks at #1` = comma(`Global Weeks at #1`),
    `Countries Reached` = comma(`Countries Reached`),
    `Country-Weeks in Top 10` = comma(`Country-Weeks in Top 10`))

datatable(
  ST_IMPACT_FINAL,
  caption = "Stranger Things â€” Combined Global Impact by Season (Scale â€¢ Longevity â€¢ Multinational Reach â€¢ #1 Weeks)",
  options = list(
    searching = FALSE, paging = FALSE, info = FALSE,
    columnDefs = list(list(className = 'dt-left', targets = "_all"))),
  rownames = FALSE)

```

*Average minutes derived from the following sources:

*<a href="https://en.wikipedia.org/wiki/List_of_Stranger_Things_episodes" target="_blank">Wikipedia's List of Stranger Things Episodes</a>*

*<a href="https://www.netflix.com/tudum/articles/stranger-things-season-4-episode-length" target="_blank">Netflix's Official Tudum Blog</a>*


```{r}

# TABLE 2: Top Countries by Weeks

summary_artifact <- COUNTRY_TOP_10 %>%
  filter(show_title == "Stranger Things") %>%
  group_by(country_name) %>%
  summarise(total_weeks_in_top_10 = n_distinct(week), .groups = "drop") %>%
  summarise(
    total_countries = n(),
    avg_weeks = round(mean(total_weeks_in_top_10), 1))

ST_TOP_COUNTRIES_WEEKS <- COUNTRY_TOP_10 %>%
  filter(show_title == "Stranger Things") %>%
  group_by(country_name) %>%
  summarise(`Weeks in Top 10` = n_distinct(week), .groups = "drop") %>%
  arrange(desc(`Weeks in Top 10`)) %>%
  slice_head(n = 20) %>%
  mutate(Rank = row_number()) %>%
  select(Rank, Country = country_name, `Weeks in Top 10`)

top3 <- ST_TOP_COUNTRIES_WEEKS$Country[ST_TOP_COUNTRIES_WEEKS$Rank <= 3]

cap_bottom <- tags$caption(
  style = "caption-side: bottom; text-align:center; color:#666; font-size:0.9em; padding-top:6px;",
  HTML(sprintf(
    "Global reach: <b>%s</b> countries &nbsp;&middot;&nbsp; Avg per-country Top-10 weeks: <b>%s</b>",
    summary_artifact$total_countries, summary_artifact$avg_weeks)))

datatable(
  ST_TOP_COUNTRIES_WEEKS,
  caption = cap_bottom,
  escape = FALSE,
  rownames = FALSE,
  options = list(
    pageLength = 5,
    lengthMenu = list(c(5,10,15,20), c('Top 5','Top 10','Top 15','Top 20')),
    searching = TRUE,
    info = FALSE,
    order = list(list(0, 'asc')),
    columnDefs = list(list(className = 'dt-left', targets = "_all")))) %>%
  formatStyle('Country', fontWeight = styleEqual(top3, rep('bold', length(top3))))

```

```{r}

# TABLE 3: Comparison to Other Shows

RUNTIME_REF <- tribble(
  ~show_title,        ~num_seasons, ~avg_episode_hrs,   
  "Stranger Things",  4,            63.5/60,            
  "Wednesday",        2,            45/60,              
  "The Witcher",      3,            60/60,              
  "The Sandman",      2,            51/60,              
  "Locke & Key",      3,            50/60,              
  "Shadow and Bone",  2,            60/60)              

SHOW_SUMMARY <- GLOBAL_TOP_10 %>%
  filter(
    category == "TV (English)",
    show_title %in% RUNTIME_REF$show_title) %>%
  group_by(show_title) %>%
  summarise(`Total Hours Viewed` = sum(weekly_hours_viewed, na.rm = TRUE), .groups = "drop") %>%
  left_join(RUNTIME_REF, by = "show_title") %>%
  mutate(`Approximate Viewership` = round(`Total Hours Viewed` / avg_episode_hrs)) %>%  
  arrange(desc(`Total Hours Viewed`)) %>%
  mutate(
    `Total Hours Viewed` = comma(`Total Hours Viewed`),
    `Approximate Viewership` = comma(`Approximate Viewership`)) %>%
  select(
    `Show Title` = show_title,
    `Number of Seasons` = num_seasons,
    `Total Hours Viewed`,
    `*Average Episode Hours` = avg_episode_hrs,  
    `Approximate Viewership`)

datatable(
  SHOW_SUMMARY,
  caption = "Global Performance of Selected English Netflix Originals (Sci-Fi/Fantasy/Supernatural, All Seasons)",
  options = list(
    pageLength = 10,
    searching = FALSE,
    paging = FALSE,
    info = FALSE,
    columnDefs = list(list(className = 'dt-left', targets = "_all"))),
  rownames = FALSE) %>%
  formatRound("*Average Episode Hours", digits = 2)

```

*Note: 

*Stranger Things'* average runtime calculated from the values presented in an earlier table.

The following links contain sources that justify the average episode runtimes.

*<a href="https://addamsfamily.fandom.com/wiki/Wednesday_(series)" target="_blank">Wednesday Average Runtime</a>*

*<a href="https://epguides.com/Witcher/" target="_blank">The Witcher Average Runtime</a>*

*<a href="https://www.tvmaze.com/shows/42827/the-sandman" target="_blank">The Sandman</a>*

*<a href="https://lockekey.fandom.com/wiki/Season_One" target="_blank">Locke & Key Average Runtime</a>*

*<a href="https://epguides.com/ShadowandBone/" target="_blank">Shadow and Bone</a>*

<br>

## Task 6: Press Release 2
## Hindi Hits Go Global: 2 Million Netflix Subscribers, 463 Million Viewing Hours

<div style="text-align: justify;">

The global demand for Hindi-language programming is thriving on Netflix. With a portfolio of titles that have generated over 463 million hours of streamed content worldwide, Netflix has become the destination for Hindi entertainment, catering to audiences across India and beyond.

Standout titles such as *Heeramandi: The Diamond Bazaar*, *Animal*, and *The Great Indian Kapil Show* have collectively drawn substantial views from global audiences, highlighting their success on Netflix's Global Top 10 weekly charts. Among its broader catalog, Netflix offers 363 India-focused titles that have not yet appeared in the US market but have achieved global Top 10 status. These titles represent nearly 50% of India's available streaming content, which demonstrates high levels of demand for region-specific programming from international audiences.

Based on audience viewing patterns and global engagement data, Netflix estimates approximately 2 million subscribers actively engage with Hindi content. This amount highlights India's significant presence in Hindi programming consumption. This figure encompasses viewers who regularly consume top-performing Hindi titles that have achieved worldwide recognition.

Beyond India, the broader South Asian market has exhibited dynamic streaming growth since 2021. Pakistan leads in this regional expansion, achieving 10.3% year-over-year growth in unique Top 10 programming. Bangladesh and Sri Lanka show positive growth trends. India has maintained steady engagement, reaching a 1.5% growth rate. Collectively, these four countries offer over 1,400 programs, indicating a well-established, regional presence.

As South Asia's content continues to attract global traction, Netflix is well-positioned to enhance its portfolio by increasing its Urdu-language programming. The language's presence in the region is high, making it a strategic choice for leveraging its cross-border use across India and Pakistan. This approach serves viewers across the region, creating opportunities for an inclusive cultural experience through shared storytelling.

Netflix has an established presence across South Asia. With a strong performance in Hindi content and growing regional offerings, it can seize this streaming momentum to continue engaging its global audiences with rich, South Asian programming.

</div>

---

*Supporting data and references are included below to provide context and transparency for the information shared in this press release.*

```{r}

# TABLE 1: Core Data: India-exclusive content (not in US, excluding Telugu/Tamil)

india_exclusive <- COUNTRY_TOP_10 %>%
  group_by(show_title, season_title) %>%
  summarise(
    appears_in_india = any(country_name == "India"),
    appears_in_us = any(country_name == "United States"),
    .groups = "drop") %>%
  filter(appears_in_india, !appears_in_us) %>%
  filter(!str_detect(tolower(show_title), "telugu|tamil"))

hindi_titles <- c(
  "Haseen Dillruba", "Sooryavanshi", "Animal", "Laapataa Ladies", "Mimi",
  "Bhool Bhulaiyaa 2", "The Railway Men - The Untold Story Of Bhopal 1984",
  "Khakee: The Bihar Chapter", "Maamla Legal Hai", "The Great Indian Kapil Show",
  "Heeramandi: The Diamond Bazaar", "Tribhuvan Mishra CA Topper",
  "IC 814: The Kandahar Hijack", "Mismatched", "Dabba Cartel"
)

manual_runtimes <- tribble(
  ~show_title,                   ~manual_runtime_hr,
  "Haseen Dillruba",             136 / 60,
  "Sooryavanshi",                145 / 60,
  "Mimi",                        132 / 60,
  "Bhool Bhulaiyaa 2",           143 / 60,
  "Khakee: The Bihar Chapter",   357 / 60
)

summary_tbl <- GLOBAL_TOP_10 %>%
  semi_join(india_exclusive, by = c("show_title", "season_title")) %>%
  filter(show_title %in% hindi_titles) %>%
  left_join(manual_runtimes, by = "show_title") %>%
  mutate(
    runtime = coalesce(runtime, manual_runtime_hr),
    content_type = if_else(str_detect(category, "Film"), "Film", "TV Show"),
    views_est = if_else(!is.na(weekly_views) & weekly_views > 0,
                        weekly_views,
                        weekly_hours_viewed / runtime)
  ) %>%
  group_by(content_type) %>%
  summarise(
    `Global: Total Hours Viewed` = sum(weekly_hours_viewed, na.rm = TRUE),
    `Global: Total Views (Est.)` = sum(views_est, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  adorn_totals("row") %>%
  rename(`Content Type` = content_type) %>%
  mutate(
    `Global: Total Hours Viewed` = comma(round(`Global: Total Hours Viewed`, -4)),
    `Global: Total Views (Est.)` = comma(round(`Global: Total Views (Est.)`, -4))
  )

datatable(
  summary_tbl,
  options = list(searching = FALSE, paging = FALSE, info = FALSE),
  caption = "Summary by Total Hours Viewed and Estimated Total Views, Hindi-Only Programs",
  rownames = FALSE
)

```


```{r}

# TABLE 2: Detailed Requested Titles

detailed_tbl <- GLOBAL_TOP_10 %>%
  semi_join(india_exclusive, by = c("show_title", "season_title")) %>%
  filter(show_title %in% hindi_titles) %>%
  left_join(manual_runtimes, by = "show_title") %>%
  mutate(runtime = coalesce(runtime, manual_runtime_hr)) %>%
  group_by(show_title) %>%
  summarise(
    content_type = if_else(str_detect(first(category), "Film"), "Film", "TV Show"),
    india_max_weeks = max(cumulative_weeks_in_top_10, na.rm = TRUE),
    total_hours = sum(weekly_hours_viewed, na.rm = TRUE),
    total_views = sum(if_else(!is.na(weekly_views) & weekly_views > 0,
                              weekly_views,
                              weekly_hours_viewed / runtime), na.rm = TRUE),
    avg_runtime_hrs = mean(runtime, na.rm = TRUE),   
    .groups = "drop") %>%
  arrange(desc(total_hours)) %>%
  rename(
    `Show Title` = show_title,
    `Content Type` = content_type,
    `India: Max Weeks` = india_max_weeks,
    `Global: Total Hours` = total_hours,
    `Global: Total Views (Est.)` = total_views,
    `*Avg Runtime (hrs)` = avg_runtime_hrs) %>%   
  mutate(
    `Global: Total Hours` = comma(round(`Global: Total Hours`, -4)),
    `Global: Total Views (Est.)` = comma(round(`Global: Total Views (Est.)`, -4)))

datatable(
  detailed_tbl,
  options = list(searching = FALSE, paging = TRUE, info = TRUE, pageLength = 3,
  columnDefs = list(list(className = 'dt-left', targets = "_all"))),
  caption = "Selected Programs, India-Only (Not US), in Global Top 10",
  rownames = FALSE) %>%
  formatRound("*Avg Runtime (hrs)", digits = 2)

```

*Note:

The links below contain sources that justify the average runtime per film and/or TV show, which were initially omitted from Netflix's Global Top 10 dataset.

*<a href="https://www.imdb.com/title/tt12015202/technical/" target="_blank">IMDB's Runtime for Haseen Dillruba</a>*

*<a href="https://www.themoviedb.org/movie/579051-sooryavanshi" target="_blank">The Movie Database (TMDB)'s Runtime for Sooryavanshi</a>*

*<a href="https://www.netflix.com/title/81250218" target="_blank">Netflix's Official Runtime for Mimi</a>*

*<a href="https://www.rottentomatoes.com/m/bhool_bhulaiyaa_2" target="_blank">Rotten Tomatoes' Movie Runtime for Bhool Bhulaiyaa 2</a>*

*<a href="https://www.imdb.com/title/tt23924974/episodes/" target="_blank">IMDB's Episode Runtime for Khakee: The Bihar Chapter</a>*

```{r}

# TABLE 3: India-exclusive breakdown (Films vs TV Shows)

india_breakdown <- COUNTRY_TOP_10 %>%
  filter(country_name == "India") %>%
  semi_join(india_exclusive, by = c("show_title", "season_title")) %>%
  distinct(show_title, season_title, category) %>%
  mutate(content_type = if_else(str_detect(category, "Films"), "Films", "TV Shows")) %>%
  count(content_type, name = "distinct_shows") %>%
  mutate(percentage = round(distinct_shows / sum(distinct_shows) * 100, 1)) %>%
  rename(`Content Type` = content_type, `Number of Shows` = distinct_shows, Percentage = percentage)

total_shows <- sum(india_breakdown$`Number of Shows`)

datatable(india_breakdown,
  options = list(searching = FALSE, info = FALSE, paging = FALSE,
  columnDefs = list(list(className = 'dt-left', targets = "_all"))),
  caption = tags$caption(style = "caption-side: bottom; text-align:center; color:#666; font-size:0.9em; padding-top:8px;",
  HTML(sprintf("Total distinct viewing options in India that do NOT appear in US (excluding Telugu/Tamil): <b>%s</b>", total_shows))),
  rownames = FALSE)

```


```{r}

# TABLE 4: Global metrics summary with subscriber estimate

global_metrics <- GLOBAL_TOP_10 %>%
  filter(category %in% c("Films (Non-English)", "TV (Non-English)")) %>%
  semi_join(india_exclusive, by = c("show_title", "season_title")) %>%
  group_by(category) %>%
  summarise(
    total_hours = sum(weekly_hours_viewed, na.rm = TRUE),
    avg_runtime = mean(runtime, na.rm = TRUE),
    .groups = "drop")

films_hours <- global_metrics$total_hours[global_metrics$category == "Films (Non-English)"]
tv_hours <- global_metrics$total_hours[global_metrics$category == "TV (Non-English)"]
combined_hours <- sum(global_metrics$total_hours)

total_views <- sum(global_metrics$total_hours / global_metrics$avg_runtime)
num_weeks <- n_distinct(GLOBAL_TOP_10$week)
views_per_week <- total_views / num_weeks

# Subscriber estimate (rough figure to extrapolate subscribers with limited data)
INDIA_SHARE <- 0.25
VIEWS_PER_SUB_PER_WEEK <- 2.0
estimated_subscribers <- (views_per_week * INDIA_SHARE) / VIEWS_PER_SUB_PER_WEEK

total_combinations <- nrow(india_exclusive)
global_count <- GLOBAL_TOP_10 %>%
  filter(category %in% c("Films (Non-English)", "TV (Non-English)")) %>%
  semi_join(india_exclusive, by = c("show_title", "season_title")) %>%
  distinct(show_title, season_title) %>%
  nrow()

global_summary <- GLOBAL_TOP_10 %>%
  filter(category %in% c("Films (Non-English)", "TV (Non-English)")) %>%
  semi_join(india_exclusive, by = c("show_title", "season_title")) %>%
  summarise(
    avg_weeks = round(mean(cumulative_weeks_in_top_10, na.rm = TRUE), 1),
    max_weeks = max(cumulative_weeks_in_top_10, na.rm = TRUE))

GLOBAL_REACH_SUMMARY <- tibble(
  Metric = c(
    "Total Show and Season Combinations",
    "Total Hours Viewed - Non-English Films",
    "Total Hours Viewed - Non-English TV",
    "Combined Hours Viewed (Non-English)",
    "Average Weeks in Global Top 10",
    "Maximum Weeks in Global Top 10",
    "Non-English Combinations in Global Charts",
    "Non-English Global Chart Penetration Rate",
    "Estimated Hindi-Engaged Subscribers",
    "  Assumption: India Share of Global Views",
    "  Assumption: Views per Subscriber per Week"),
  Value = c(
    total_combinations,
    comma(films_hours),
    comma(tv_hours),
    comma(combined_hours),
    paste0(global_summary$avg_weeks, " weeks"),
    paste0(global_summary$max_weeks, " weeks"),
    paste0(global_count, " of ", total_combinations, " combinations"),
    paste0(round((global_count / total_combinations) * 100, 1), "%"),
    comma(round(estimated_subscribers)),
    paste0(INDIA_SHARE * 100, "%"),
    paste0(VIEWS_PER_SUB_PER_WEEK, " shows")))

datatable(
  GLOBAL_REACH_SUMMARY,
  options = list(
    searching = FALSE, 
    info = FALSE, 
    paging = FALSE,
    columnDefs = list(list(className = 'dt-left', targets = "_all"))),
  caption = tags$caption(
    style = "caption-side: bottom; text-align:center; color:#666; font-size:0.9em; padding-top:8px;",
    HTML("India-exclusive NON-ENGLISH content (proxy for Hindi; excludes Telugu/Tamil) 
                    with global Top 10 status")),
  rownames = FALSE)

```


```{r}

# TABLE 5: South Asia Growth

south_asian_countries <- c("India", "Pakistan", "Bangladesh", "Sri Lanka")

yearly_unique_programs <- COUNTRY_TOP_10 %>%
  filter(country_name %in% south_asian_countries) %>%
  mutate(
    year_period = case_when(
      week >= as.Date("2021-07-04") & week < as.Date("2022-07-04") ~ "2021-2022",
      week >= as.Date("2022-07-04") & week < as.Date("2023-07-04") ~ "2022-2023",
      week >= as.Date("2023-07-04") & week < as.Date("2024-07-04") ~ "2023-2024",
      week >= as.Date("2024-07-04") & week <= as.Date("2025-07-05") ~ "2024-2025")) %>%
  filter(!is.na(year_period)) %>%
  mutate(unique_program = paste(show_title, coalesce(season_title, "NA_SEASON"), sep = " || ")) %>%
  group_by(country_name, year_period) %>%
  summarise(unique_programs_count = n_distinct(unique_program), .groups = "drop")

growth_summary <- yearly_unique_programs %>%
  group_by(country_name) %>%
  arrange(year_period) %>%
  summarise(
    total_growth = round(((last(unique_programs_count) - first(unique_programs_count)) / first(unique_programs_count)) * 100, 1),
    .groups = "drop") %>%
  mutate(total_growth = paste0(if_else(total_growth > 0, "+", ""), total_growth, "%"))

yearly_unique_programs %>%
  pivot_wider(names_from = year_period, values_from = unique_programs_count) %>%
  left_join(growth_summary, by = "country_name") %>%
  rename(Country = country_name, `Total Growth` = total_growth,
         `2021-22` = `2021-2022`, `2022-23` = `2022-2023`,
         `2023-24` = `2023-2024`, `2024-25` = `2024-2025`) %>%
  datatable(
    options = list(
      searching = FALSE, 
      info = FALSE, 
      paging = FALSE,
      columnDefs = list(list(className = 'dt-left', targets = "_all"))),
    caption = "Netflix Top 10 Program Growth in South Asia (2021-2025)",
    rownames = FALSE)

```

<br>

## Task 7: Press Release 3 
## Billion-Hour Nostalgia: Telenovelas Dominate Netflix

<div style="text-align: justify;">

Telenovelas are leading the surge in streaming on Netflix. The influence of four classic titles has led to over 1.2 billion global viewing hours. Audiences have succumbed to the telenovela, with its compelling and rich storytelling, showcasing the impact and universal appeal of stories highlighting the Spanish-language and Latin American culture.

Leading these views is *CafÃ© con Aroma de Mujer* (1994), which has amassed an astounding 813 million viewing hours. Also sharing a large portion of viewership is the classic 1999 series *Yo Soy Betty, La Fea*, with 297 million hours of viewing time. The 2012 drama *Pablo Escobar, el PatrÃ³n del Mal* also boasts remarkable longevity, having appeared in multiple Country Top 10 lists for a total of 102 weeks. These numbers demonstrate that high-quality, archival content sustains and endures, continually finding new ways to capture new audiences.

The success of these classics is in conjunction with a strong lineup of Netflix's original programming. One example is *Elite*, an original series which has accumulated 568 million hours across its eight seasons, reaching all 17 Latin American markets (a feat matched only by *Pablo Escobar*). Offering nostalgic favorites and brand-new content enables Netflix to satisfy a diverse range of tastes across Latin America and beyond.

For the region's For the region's <a href="https://en.wikipedia.org/wiki/List_of_Latin_American_countries_by_population" target="_blank">420 million Spanish speakers</a>, Netflix's strategy has led to increased engagement across Latin America. By reviving timeless stories and creating new ones, Netflix is building a platform that sparks the interest of a diverse range of viewers across generations.

</div>

---

*Supporting data and references are included below to provide context and transparency for the information shared in this press release.*

```{r}

# TABLE 1: Top Show/Season by Country (excludes Brazil)

SPANISH_LATAMER <- c(
  "Argentina", "Bolivia", "Chile", "Colombia", "Costa Rica", "Dominican Republic",
  "Ecuador", "El Salvador", "Guatemala", "Honduras", "Mexico", "Nicaragua",
  "Panama", "Paraguay", "Peru", "Uruguay", "Venezuela")

COUNTRY_TOP_10 %>%
  filter(country_name %in% SPANISH_LATAMER) %>%
  filter(show_title != "PasiÃ³n de Gavilanes") %>% 
  group_by(country_name, show_title, season_title) %>%
  summarise(max_cumulative = max(cumulative_weeks_in_top_10, na.rm = TRUE), .groups = "drop") %>%
  group_by(country_name) %>%
  slice_max(max_cumulative, n = 1, with_ties = FALSE) %>%
  ungroup() %>%
  rename(
    Country = country_name,
    `Show Title` = show_title,
    `Season Title` = season_title,
    `Cumulative Weeks in Top 10` = max_cumulative) %>%
  datatable(
     options = list(
       searching = FALSE, 
       paging = TRUE, 
       info = TRUE, 
       pageLength = 3,
       lengthMenu = list(c(3, 5, 10, 17), c('3', '5', '10', 'All')),
       columnDefs = list(list(className = 'dt-left', targets = "_all"))),
     caption = tags$caption(
       style = "caption-side: bottom; text-align:center; color:#666; font-size:0.9em; padding-top:8px;",
       HTML("Spanish-speaking Latin American Countries: Top Show/Season by Cumulative Weeks in Top 10")),
     rownames = FALSE)

```

```{r}

# TABLE 2: Top Three Classic Telenovelas - Global Performance

TOP_PROGRAMS <- tribble(
  ~show_title,                         ~season_title,                              ~avg_runtime_hrs,
  "CafÃ© con aroma de mujer",           "CafÃ© con aroma de mujer: Season 1",          43/60,
  "Pablo Escobar, el patrÃ³n del mal",  "Pablo Escobar, el patrÃ³n del mal: Season 1", 45/60,
  "Yo soy Betty, la fea",              "Yo soy Betty, la fea: Season 1",             30/60)

telenovela_metrics <- GLOBAL_TOP_10 %>%
  inner_join(TOP_PROGRAMS, by = c("show_title", "season_title")) %>%
  group_by(category, show_title, season_title, avg_runtime_hrs) %>%
  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE), .groups = "drop") %>%
  mutate(approx_views = round(total_hours / avg_runtime_hrs))

totals_row <- telenovela_metrics %>%
  summarise(across(where(is.numeric), sum, na.rm = TRUE)) %>%
  mutate(
    category = "TOTAL",
    show_title = "â€”",
    season_title = "â€”",
    avg_runtime_hrs = NA_real_)

telenovela_display <- telenovela_metrics %>%
  arrange(total_hours) %>%
  select(
    Category = category,
    `Show Title` = show_title,
    `Season Title` = season_title,
    `Total Weekly Hours Viewed` = total_hours,
    `*Avg Runtime (hrs)` = avg_runtime_hrs,
    `Approx Global Views` = approx_views) %>%
  bind_rows(
    totals_row %>%
      select(
        Category = category,
        `Show Title` = show_title,
        `Season Title` = season_title,
        `Total Weekly Hours Viewed` = total_hours,
        `*Avg Runtime (hrs)` = avg_runtime_hrs,
        `Approx Global Views` = approx_views))

datatable(
  telenovela_display,
  options = list(
    searching = FALSE, 
    paging = FALSE, 
    info = FALSE,
    columnDefs = list(list(className = 'dt-left', targets = "_all"))),
  caption = tags$caption(
    style = "caption-side: bottom; text-align:center; color:#666; font-size:0.9em; padding-top:8px;",
    HTML("Global Hours & Runtime-Adjusted Approximate Views (Cross-referenced from TSVs)")),
  rownames = FALSE) %>%
  formatCurrency(c("Total Weekly Hours Viewed", "Approx Global Views"), 
                 currency = "", digits = 0, mark = ",") %>%
  formatRound("*Avg Runtime (hrs)", digits = 2)

```

*Note: 

Average runtime values are approximations. The sources below provide details highlighting program runtime across episodes and seasons.

*<a href="https://www.netflix.com/title/80035684" target="_blank">Netflix's Average Episode Runtime for Pablo Escobar: El PatrÃ³n del Mal</a>*

*<a href="https://thetvdb.com/series/cafe-con-aroma-de-mujer-2021#general" target="_blank">tvdb's Average Episode Runtime for CafÃ© con Aroma de Mujer</a>*

*<a href="https://www.imdb.com/title/tt0233127/" target="_blank">IMDB's Average Episode Runtime for Yo Soy Betty, La Fea</a>*
And for Elite:

Additionally, the hours listed in the table are global for the titles, as the country TSV does not contain this information.

```{r}

# TABLE 3: Elite - Global Performance

elite_runtime <- 50/60

GLOBAL_TOP_10 %>%
  filter(show_title == "Elite") %>%
  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE), .groups = "drop") %>%
  mutate(
    Category = "TV (Non-English)",
    `Show Title` = "Elite",
    `Season Title` = "All Seasons (8)",
    `Total Weekly Hours Viewed` = comma(total_hours),
    `*Avg Runtime (hrs)` = elite_runtime,
    `Approx Global Views` = comma(round(total_hours / elite_runtime)),
    `Number of LATAM Countries Reached` = COUNTRY_TOP_10 %>%
      filter(show_title == "Elite", country_name %in% SPANISH_LATAMER) %>%
      summarise(n = n_distinct(country_name)) %>%
      pull(n)) %>%
  select(-total_hours) %>%
  datatable(
    options = list(
      searching = FALSE, 
      paging = FALSE, 
      info = FALSE,
      columnDefs = list(list(className = 'dt-left', targets = "_all"))),
    caption = tags$caption(
      style = "caption-side: bottom; text-align:center; color:#666; font-size:0.9em; padding-top:8px;",
      HTML("Global Hours & Runtime-Adjusted Approximate Views (Cross-referenced from TSVs)")),
    rownames = FALSE) %>%
  formatRound("*Avg Runtime (hrs)", digits = 2)

```

*Note: 

Average runtime values are approximations. The source below provides details highlighting program runtime across episodes and seasons.

*<a href="https://www.tvmaze.com/shows/37854/elite" target="_blank">TVMaze's Average Episode Runtime for Elite</a>*

<br>